version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@7.2.0
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.11.0

parameters:
  docker_image:
    type: string
    default: python:3.10.0-bullseye

  

  cluster-name:
        description: |
          Name of the EKS cluster
        type: string
        default: covidanalysisapp

jobs:
  linting:
    docker:
    # Use the same Docker base as the project
      - image: << pipeline.parameters.docker_image >>
    # working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
                chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
          
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint     

  deploy-staging:
    docker:
      - image: << pipeline.parameters.docker_image >>
    steps:
      - checkout

      - run:
          name: Install awscli and gettext-base
          command: |
            pip install awscli
      - run:
          name: Install aws-iam-authenticator
          command: |
            curl -o aws-iam-authenticator curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/aws-iam-authenticator
            chmod +x ./aws-iam-authenticator
            mv ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator
      - run:
          name: Install kubectl
          command: |
            curl -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mv ./kubectl /usr/local/bin/kubectl

      # - setup_remote_docker

      # - run:
      #     name: Login to repository and build docker image
      #     command: |
      #       eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
      #       docker build -t ${AWS_REPOSITORY_URL}/${REPOSITORY_NAME}:${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM} .
      #       docker push ${AWS_REPOSITORY_URL}/${REPOSITORY_NAME}:${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}
      - run:
          name: Prepare K8S templates
          command: |
            aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name covidanalysisapp
            rm -rf .k8s/.generated && mkdir -p .k8s/.generated
            for f in .k8s/templates/staging.yml
              do
              envsubst < $f > ".k8s/.generated/$(basename $f)"
            done
      - run:
          name: Deploy
          command: |
            kubectl apply -f .k8s/.generated/ --validate=true
            kubectl get pod

  
  undeploy-application:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: ""
    steps:
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: << parameters.aws-region >>
      - kubernetes/delete-resource:
          resource-types: "deployment,service"
          label-selector: "app=covidanalysis-app"
          wait: true
      - run:
          name: Check on pod status
          command: |
            kubectl get pods
workflows:
  deployment:
    jobs:
      - linting
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          # context: myContext
          create-repo: true
          dockerfile: Dockerfile
          no-output-timeout: 20m
          path: ~
          profile-name: covid19analysis
          region: AWS_DEFAULT_REGION
          repo: covidanalysisapp
          skip-when-tags-exist: false
          tag: ${CIRCLE_SHA1}
          requires:
            - linting

      
      - deploy-staging:
          requires:
             - aws-ecr/build-and-push-image

      # - test-application:
      #     name: test-application
      #     cluster-name: covidanalysis-app-deployment
      #     aws-region: $AWS_DEFAULT_REGION
      #     expected-version-info: "${CIRCLE_SHA1}"
      #     requires:
      #       - build_image_and_deploy_staging
    

