version: 2.1

orbs:
  
  aws-eks: circleci/aws-eks@0.2.3
  aws-ecr: circleci/aws-ecr@7.2.0
  kubernetes: circleci/kubernetes@0.4.0

parameters:
  docker_image:
    type: string
    default: python:3.10.0-bullseye

jobs:
  linting:
    docker:
    # Use the same Docker base as the project
      - image: << pipeline.parameters.docker_image >>
    # working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
                chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
          
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint     

  deploy-application:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
        default: covid19-analysis
      docker-image-name:
        description: |
          Name of the docker image to be deployed
        default: python:3.10.0-bullseye
        type: string
      version-info:
        description: |
          App version information
        type: string
        default: v1.000
      aws-region:
        description: |
          AWS region
        default: $AWS_DEFAULT_REGION
        type: string
        
    steps:
      - checkout
      - run:
          name: Create deployment manifest
          command: |
            # Replace the placeholders in the manifest with the intended values.
            # This is to avoid hardcoding the image name in the manifest, to make this
            # demo project more portable.
            BUILD_DATE=$(date '+%Y%m%d%H%M%S')
            cat deployment/app-deploy-template.yaml |\
               sed "s|DOCKER_IMAGE_NAME|<< parameters.docker-image-name >>|\
                g;s|BUILD_DATE_VALUE|$BUILD_DATE|g;s|VERSION_INFO_VALUE|\
                << parameters.version-info >>|g" > deployment/app-deploy.yaml
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: << parameters.aws-region >>
      - kubernetes/create-or-update-resource:
          resource-file-path: "deployment/app-deploy.yaml"
          get-rollout-status: true
          resource-name: deployment/demoapp
      - kubernetes/create-or-update-resource:
          resource-file-path: "deployment/app-service.yaml"
  test-application:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: ""
      expected-version-info:
        description: |
          Expected app version (this is used for testing that the
          correct version has been deployed)
        type: string
    steps:
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: << parameters.aws-region >>
      - run:
          name: Wait for service to be ready
          command: |
            kubectl get pods
            kubectl get services
            sleep 30
            for attempt in {1..20}; do
              EXTERNAL_IP=$(kubectl get service demoapp | awk '{print $4}' | tail -n1)
              echo "Checking external IP: ${EXTERNAL_IP}"
              if [ -n "${EXTERNAL_IP}" ] && [ -z $(echo "${EXTERNAL_IP}" | grep "pending") ]; then
                break
              fi
              echo "Waiting for external IP to be ready: ${EXTERNAL_IP}"
              sleep 10
            done
            sleep 180
            curl -s --retry 10 "http://$EXTERNAL_IP" | grep "<< parameters.expected-version-info >>"
  undeploy-application:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: ""
    steps:
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: << parameters.aws-region >>
      - kubernetes/delete-resource:
          resource-types: "deployment,service"
          label-selector: "app=covidanalysis_app"
          wait: true
      - run:
          name: Check on pod status
          command: |
            kubectl get pods
workflows:
  deployment:
    jobs:
      - linting
      - aws-ecr/build_and_push_image:
          name: build-and-push-image
          account-url: AWS_ECR_URL
          region: AWS_DEFAULT_REGION
          repo: covidanalysisapp
          dockerfile: Dockerfile
          path: ~
          tag: ${CIRCLE_SHA1}
          # Uncomment if the repository does not yet exist
          create-repo: true
          requires:
            - linting
      - aws-eks/create-cluster:
          cluster-name: covidanalysis-app-deployment
          aws-region: $AWS_DEFAULT_REGION
          requires:
            - build-and-push-image
      - deploy-application:
          cluster-name: covidanalysis-app-deployment
          aws-region: $AWS_DEFAULT_REGION
          docker-image-name: "${AWS_ECR_URL}/covidanalysis_app:${CIRCLE_SHA1}"
          version-info: "${CIRCLE_SHA1}"
          requires:
            - aws-eks/create-cluster
      - test-application:
          name: test-application
          cluster-name: covidanalysis-app-deployment
          aws-region: $AWS_DEFAULT_REGION
          expected-version-info: "${CIRCLE_SHA1}"
          requires:
            - deploy-application
      # - undeploy-application:
      #     cluster-name: eks-orb-demo-app-deployment
      #     aws-region: $AWS_DEFAULT_REGION
      #     requires:
      #       - test-application
      # - aws-eks/delete-cluster:
      #     cluster-name: eks-orb-demo-app-deployment
      #     aws-region: $AWS_DEFAULT_REGION
      #     wait: true
      #     requires:
      #       - undeploy-application

# workflows:
#   deployment:
#     jobs:
#         - linting
#         - build-docker-image:
#             requires:
#               - build
#         - Push-docker-image:
             
#         - lint
#         - Deploy Container

